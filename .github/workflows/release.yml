name: build-and-release
on:
  workflow_dispatch:  # GitHub Actions 페이지에서 수동으로 실행
  push:
    tags:
      - 'v*'  # v1.0.0 같은 태그를 push하면 실행

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Extract VERSION from RELEASE.md
        id: get_version
        run: |
          $content = Get-Content -Path "RELEASE.md" -Raw
          if ($content -match '\[-\[VERSION:(\d+\.\d+\.\d+)\]-\]') {
            $version = $matches[1]
            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
            echo "Detected VERSION: $version"
          } else {
            Write-Error "Version marker [-[VERSION:x.x.x]-] not found in RELEASE.md"
            exit 1
          }
        shell: pwsh

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pillow

      - name: Build exe
        run: |
          pyinstaller -F -w -i favicon/favicon.ico --add-data "favicon;favicon" -n Ato pdf_email_sender_gui.py

      - name: Install Windows SDK for signtool
        run: |
          choco install windows-sdk-10-version-2004-all -y
        shell: pwsh

      - name: Self-sign exe
        run: |
          $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject "CN=AtoSelfSigned" -KeyExportPolicy Exportable -KeyUsage DigitalSignature -CertStoreLocation "Cert:\CurrentUser\My"
          $pfxPath = "temp_cert.pfx"
          $pfxPassword = ConvertTo-SecureString "temppass123" -AsPlainText -Force
          Export-PfxCertificate -Cert $cert -FilePath $pfxPath -Password $pfxPassword
          
          $signtoolPaths = @(
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe",
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe",
            "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe",
            "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe"
          )
          
          $signtool = $null
          foreach ($path in $signtoolPaths) {
            if (Test-Path $path) {
              $signtool = $path
              break
            }
          }
          
          if ($null -eq $signtool) {
            Write-Error "signtool.exe not found even after SDK installation"
            exit 1
          }
          
          Write-Host "Using signtool: $signtool"
          & $signtool sign /f $pfxPath /p "temppass123" /fd sha256 /td sha256 /tr http://timestamp.sectigo.com dist\Ato.exe
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Signing failed"
            exit 1
          }
          
          $signature = Get-AuthenticodeSignature dist\Ato.exe
          Write-Host "Signature Status: $($signature.Status)"
          
          if ($signature.Status -eq "NotSigned") {
            Write-Error "File is not signed"
            exit 1
          }
          
          Remove-Item -Force $pfxPath -ErrorAction SilentlyContinue
        shell: pwsh

      - name: Prepare Release Notes
        run: |
          $content = Get-Content -Path "RELEASE.md" -Raw
          $version = "${{ steps.get_version.outputs.VERSION }}"
          
          # 현재 버전의 시작점 찾기
          if ($content -match "(?s)\[-\[VERSION:$version\]-\](.*?)(?=\[-\[VERSION:|$)") {
            $versionContent = $matches[1].Trim()
            $versionContent | Out-File -FilePath "release_body.md" -Encoding UTF8
            Write-Host "Extracted release notes for version $version"
          } else {
            Write-Error "Could not extract release notes for version $version"
            exit 1
          }
        shell: pwsh

      - name: Zip artifact
        run: |
          powershell -Command "Compress-Archive -Path dist\\Ato.exe -DestinationPath dist\\Ato-v${{ steps.get_version.outputs.VERSION }}-windows.zip -Force"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
          body_path: release_body.md
          files: |
            dist/Ato-v${{ steps.get_version.outputs.VERSION }}-windows.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
